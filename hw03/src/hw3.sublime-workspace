{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"am",
				"ambient"
			],
			[
				"getD",
				"getDiffuseColor"
			],
			[
				"radio",
				"radiosity_delta"
			],
			[
				"dif",
				"diffuse_delta"
			],
			[
				"diff",
				"diff_total"
			],
			[
				"ambient",
				"ambient_term"
			],
			[
				"ab",
				"ambient"
			],
			[
				"tot",
				"total_area"
			],
			[
				"p_",
				"p_all"
			],
			[
				"to",
				"total_undistributed*total_area"
			],
			[
				"form",
				"formFac"
			],
			[
				"getA",
				"getArea"
			],
			[
				"get",
				"getArea"
			],
			[
				"max",
				"max_undistrubted"
			],
			[
				"dis",
				"dist_diff"
			],
			[
				"rand",
				"rand_patch_j"
			],
			[
				"num_",
				"num_form_factor_samples"
			],
			[
				"hit",
				"hit_count"
			],
			[
				"dir",
				"dir_ray"
			],
			[
				"comp",
				"computeNormal"
			],
			[
				"path",
				"patch_i"
			],
			[
				"star",
				"stratifiedSamples"
			],
			[
				"inv",
				"inverse_color"
			],
			[
				"getR",
				"getRoughness"
			],
			[
				"geta",
				"getAbsorbed"
			],
			[
				"set",
				"setUndistributed"
			],
			[
				"F_",
				"F_i_max"
			],
			[
				"total",
				"total_undistributed"
			],
			[
				"getde",
				"getDiffuseColor"
			],
			[
				"dire",
				"direct_to_j"
			],
			[
				"Dir",
				"direct_to_i"
			],
			[
				"path_",
				"patch_i"
			],
			[
				"ray",
				"rayDir_ji"
			],
			[
				"Comp",
				"ComputeFormFactors"
			],
			[
				"inc",
				"include"
			],
			[
				"end",
				"endl"
			],
			[
				"rayD",
				"rayDir_ij"
			],
			[
				"norm",
				"normalRay"
			],
			[
				"Add",
				"AddTransmittedSegment"
			],
			[
				"com",
				"computeCentroid"
			],
			[
				"RayTrac",
				"RayTracer::CastRay"
			],
			[
				"Com",
				"ComputeFormFactors"
			],
			[
				"setup",
				"setupVBOs"
			],
			[
				"rayDir",
				"rayDir_ji"
			],
			[
				"rayDi",
				"rayDir_ij"
			],
			[
				"angl",
				"angle_j"
			],
			[
				"N",
				"Negate"
			],
			[
				"find",
				"findMaxUndistributed"
			],
			[
				"ang",
				"angle_i"
			],
			[
				"le",
				"legalAngle"
			],
			[
				"angle",
				"angle_j"
			],
			[
				"nor",
				"normal_j"
			],
			[
				"M",
				"M_PI"
			],
			[
				"angle_",
				"angle_i"
			],
			[
				"comput",
				"computeNormal"
			],
			[
				"max_u",
				"max_undistributed_patch"
			],
			[
				"getE",
				"getEmittedColor"
			],
			[
				"getf",
				"getFormFactor"
			],
			[
				"num",
				"num_faces"
			],
			[
				"pat",
				"patch_j"
			],
			[
				"formfac",
				"formfactors"
			],
			[
				"dist",
				"distance"
			],
			[
				"ray_",
				"ray_ij"
			],
			[
				"Le",
				"Length"
			],
			[
				"direct",
				"direct1"
			],
			[
				"direc",
				"direct1"
			],
			[
				"comu",
				"computeCentroid"
			],
			[
				"patch",
				"patch_j"
			],
			[
				"pathc",
				"patch_i"
			],
			[
				"or",
				"origin_i"
			],
			[
				"compute",
				"computeCentroid"
			],
			[
				"Ran",
				"RandomPoint"
			],
			[
				"rando",
				"randomLightVec"
			],
			[
				"Dist",
				"Distance3f"
			],
			[
				"point",
				"pointAtParameter"
			],
			[
				"sha",
				"shadowHit"
			],
			[
				"sh",
				"shadowRay"
			],
			[
				"Ray",
				"RayTree::AddShadowSegment"
			],
			[
				"dirtoL",
				"dirToLightCentroid"
			],
			[
				"relf",
				"reflectiveColor"
			],
			[
				"reflec",
				"reflectiveColor"
			],
			[
				"refl",
				"reflectiveColor"
			],
			[
				"ref",
				"reflectiveDir"
			],
			[
				"RayTree",
				"RayTree::reflected_segments"
			],
			[
				"Raytree",
				"RayTree::reflected_segments"
			],
			[
				"bou",
				"bounce"
			],
			[
				"ADD",
				"AddReflectedSegment"
			],
			[
				"int",
				"inter"
			],
			[
				"getM",
				"getMaterial"
			],
			[
				"in",
				"inside"
			],
			[
				"Dot",
				"Dot3"
			],
			[
				"rest",
				"restStructLength"
			],
			[
				"adj",
				"AdjustForIncompressibility"
			],
			[
				"getN",
				"get_new_w_plus"
			],
			[
				"get_new",
				"get_new_w_plus"
			],
			[
				"get_",
				"get_new_v_plus"
			],
			[
				"upd",
				"UpdatePressures"
			],
			[
				"con",
				"continue"
			],
			[
				"div",
				"divergance_chunck"
			],
			[
				"CE",
				"CELL_FULL"
			],
			[
				"dive",
				"divergance_chunck"
			],
			[
				"CELL",
				"CELL_FULL"
			],
			[
				"std",
				"std::endl"
			],
			[
				"ad",
				"adjust_new_w_plus"
			],
			[
				"adju",
				"adjust_new_u_plus"
			],
			[
				"cell",
				"CELL_FULL"
			],
			[
				"u",
				"unhappyness"
			],
			[
				"adjust",
				"adjust_new_w_plus"
			],
			[
				"ma",
				"max_divergence"
			],
			[
				"Ad",
				"AdjustForIncompressibility"
			],
			[
				"getS",
				"getSurroundingTargets"
			],
			[
				"getP",
				"-getPressure"
			],
			[
				"pro",
				"provot_structural_correction"
			],
			[
				"new",
				"new_other"
			],
			[
				"res",
				"restShearLength"
			],
			[
				"provot_s",
				"provot_shear_correction"
			],
			[
				"line",
				"line_other_cur"
			],
			[
				"Nor",
				"NormalizedCopy"
			],
			[
				"new_",
				"new_cur"
			],
			[
				"line_",
				"line_cur_other"
			],
			[
				"are",
				"area_u1"
			],
			[
				"area",
				"area_u2"
			],
			[
				"interp",
				"interpolated_u"
			],
			[
				"wid",
				"width*length"
			],
			[
				"inter",
				"interpolated_v"
			],
			[
				"pos_",
				"pos_u1"
			],
			[
				"vel_",
				"vel_u3"
			],
			[
				"lowb",
				"low_bound_b"
			]
		]
	},
	"buffers":
	[
		{
			"file": "radiosity.cpp",
			"settings":
			{
				"buffer_size": 19467,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/espinm2/Code/graphics_lab_repo/theses/nasmaj/Thesis.bib",
			"settings":
			{
				"buffer_size": 38967,
				"line_ending": "Unix"
			}
		},
		{
			"file": "vectors.h",
			"settings":
			{
				"buffer_size": 8490,
				"line_ending": "Unix"
			}
		},
		{
			"file": "reflective_spheres.obj",
			"settings":
			{
				"buffer_size": 613,
				"line_ending": "Unix"
			}
		},
		{
			"file": "textured_water_molecule.obj",
			"settings":
			{
				"buffer_size": 693,
				"line_ending": "Unix"
			}
		},
		{
			"file": "hw3_gradesheet.txt",
			"settings":
			{
				"buffer_size": 3637,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.txt",
			"settings":
			{
				"buffer_size": 4134,
				"line_ending": "Unix"
			}
		},
		{
			"file": "radiosity.h",
			"settings":
			{
				"buffer_size": 4297,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ray.h",
			"settings":
			{
				"buffer_size": 1065,
				"line_ending": "Unix"
			}
		},
		{
			"file": "hit.h",
			"settings":
			{
				"buffer_size": 1545,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 57 files for \"FLT_MAX\"\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/hit.h:\n   19    // CONSTRUCTOR & DESTRUCTOR\n   20    Hit() { \n   21:     t = FLT_MAX;\n   22      material = NULL;\n   23      normal = Vec3f(0,0,0); \n\n1 match in 1 file\n\n\nSearching 57 files for \"FLT_MAX\"\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/hit.h:\n   19    // CONSTRUCTOR & DESTRUCTOR\n   20    Hit() { \n   21:     t = FLT_MAX;\n   22      material = NULL;\n   23      normal = Vec3f(0,0,0); \n\n1 match in 1 file\n\n\nSearching 57 files for \"CastRay\"\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.cpp:\n  182  \n  183        		// Trace ray + incr if I hit something\n  184:       		raytracer->CastRay(freedom,justice,false);\n  185  \n  186        		// I hit something, is it my something?\n  ...\n  217        if(max_undistributed_patch == i){\n  218          Hit hit;\n  219:         if(raytracer->CastRay(ray_ij,hit,false)){\n  220            RayTree::AddShadowSegment(ray_ij,0,hit.getT()/2);\n  221          }else{\n  ...\n  231          hit = Hit();\n  232          Ray ray_ji(patch_j->computeCentroid(), direct_to_i);\n  233:         raytracer->CastRay(ray_ji,hit,false);\n  234          RayTree::AddReflectedSegment(ray_ji,0,hit.getT()/2);\n  235        }\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/raytracer.cpp:\n   15  // single ray, used in our Trace Ray\n   16  // Given a Ray, hit class is a class that stores information about the hit\n   17: bool RayTracer::CastRay(const Ray &ray, Hit &h, bool use_rasterized_patches) const {\n   18    bool answer = false;\n   19  \n   ..\n   47    // First cast a ray and see if we hit anything. (Done)\n   48    hit = Hit();\n   49:   bool intersect = CastRay(ray,hit,false);\n   50      \n   51    // if there is no intersection, simply return the background color\n   ..\n  151  \n  152        // If I hit something and that something isn't the lightsource\n  153:       if(CastRay(shadowRay,shadowHit,false) && shadowHit.getMaterial()->getEmittedColor().Length() <= 0.001 ){\n  154  \n  155          RayTree::AddShadowSegment(shadowRay,0,shadowHit.getT());\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/raytracer.h:\n   31  \n   32    // casts a single ray through the scene geometry and finds the closest hit\n   33:   bool CastRay(const Ray &ray, Hit &h, bool use_sphere_patches) const;\n   34  \n   35    // does the recursive work\n\n7 matches across 3 files\n\n\nSearching 58 files for \"Iterate\"\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/glCanvas.cpp:\n  322    case ' ': \n  323      // a single step of radiosity\n  324:     radiosity->Iterate();\n  325      radiosity->setupVBOs();\n  326      glutPostRedisplay();\n  ...\n  489  void GLCanvas::idle() {\n  490    if (args->radiosity_animation) {\n  491:     double undistributed = radiosity->Iterate();\n  492      if (undistributed < 0.001) {\n  493        args->radiosity_animation = false;\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.cpp:\n  241  \n  242  // jump\n  243: double Radiosity::Iterate() {\n  244  \n  245    // Set up the form factors will only run once\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.h:\n   63    // =========\n   64    // MODIFIERS\n   65:   double Iterate();\n   66    void setFormFactor(int i, int j, double value) { \n   67      assert (i >= 0 && i < num_faces);\n\n4 matches across 3 files\n\n\nSearching 58 files for \"Iterate\"\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/glCanvas.cpp:\n  322    case ' ': \n  323      // a single step of radiosity\n  324:     radiosity->Iterate();\n  325      radiosity->setupVBOs();\n  326      glutPostRedisplay();\n  ...\n  489  void GLCanvas::idle() {\n  490    if (args->radiosity_animation) {\n  491:     double undistributed = radiosity->Iterate();\n  492      if (undistributed < 0.001) {\n  493        args->radiosity_animation = false;\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.cpp:\n  241  \n  242  // jump\n  243: double Radiosity::Iterate() {\n  244  \n  245    // Set up the form factors will only run once\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.h:\n   63    // =========\n   64    // MODIFIERS\n   65:   double Iterate();\n   66    void setFormFactor(int i, int j, double value) { \n   67      assert (i >= 0 && i < num_faces);\n\n4 matches across 3 files\n\n\nSearching 58 files for \"emitt\"\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/material.cpp:\n  118    Vec3f answer = Vec3f(0,0,0);\n  119  \n  120:   // emitted component\n  121    // -----------------\n  122:   answer += getEmittedColor();\n  123  \n  124    // diffuse component\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/material.h:\n   31      }\n   32      reflectiveColor = r_color;\n   33:     emittedColor = e_color;\n   34      roughness = roughness_;\n   35      // need to initialize texture_id after glut has started\n   ..\n   43    const Vec3f getDiffuseColor(double s, double t) const;\n   44    const Vec3f& getReflectiveColor() const { return reflectiveColor; }\n   45:   const Vec3f& getEmittedColor() const { return emittedColor; }  \n   46    double getRoughness() const { return roughness; } \n   47    bool hasTextureMap() const { return (textureFile != \"\"); } \n   ..\n   66    Vec3f diffuseColor;\n   67    Vec3f reflectiveColor;\n   68:   Vec3f emittedColor;\n   69    double roughness;\n   70  \n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/mesh.cpp:\n  115    }\n  116    // if it's a light, add it to that list too\n  117:   if (material->getEmittedColor().Length() > 0 && face_type == FACE_TYPE_ORIGINAL) {\n  118      original_lights.push_back(f);\n  119    }\n  ...\n  250  	texture_file = directory + texture_file;\n  251        }\n  252:       Vec3f reflective,emitted;      \n  253        objfile >> token >> r >> g >> b;\n  254        assert (token == \"reflective\");\n  ...\n  260  	objfile >> token;\n  261        } \n  262:       assert (token == \"emitted\");\n  263        objfile >> r >> g >> b;\n  264:       emitted = Vec3f(r,g,b);\n  265:       materials.push_back(new Material(texture_file,diffuse,reflective,emitted,roughness));\n  266      } else {\n  267        std::cout << \"UNKNOWN TOKEN \" << token << std::endl;\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/photon_mapping.cpp:\n   77      int num = args->num_photons_to_shoot * my_area / total_lights_area;\n   78      // the initial energy for this photon\n   79:     Vec3f energy = my_area/double(num) * lights[i]->getMaterial()->getEmittedColor();\n   80      Vec3f normal = lights[i]->computeNormal();\n   81      for (int j = 0; j < num; j++) {\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.cpp:\n   74      f->setRadiosityPatchIndex(i);\n   75      setArea(i,f->getArea());\n   76:     Vec3f emit = f->getMaterial()->getEmittedColor();\n   77      setUndistributed(i,emit);\n   78      setAbsorbed(i,Vec3f(0,0,0));\n   ..\n  340      return color;\n  341    } else if (args->render_mode == RENDER_LIGHTS) {\n  342:     return f->getMaterial()->getEmittedColor();\n  343    } else if (args->render_mode == RENDER_UNDISTRIBUTED) { \n  344      return getUndistributed(i);\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/raytracer.cpp:\n   65  \n   66    // rays coming from the light source are set to white, don't bother to ray trace further.\n   67:   if (m->getEmittedColor().Length() > 0.001) {\n   68      return Vec3f(1,1,1);\n   69    } \n   ..\n  115  \n  116        // Get color of light\n  117:       Vec3f lightColor = f->getMaterial()->getEmittedColor() * f->getArea();\n  118  \n  119        // Color I will have locally\n  ...\n  151  \n  152        // If I hit something and that something isn't the lightsource\n  153:       if(CastRay(shadowRay,shadowHit,false) && shadowHit.getMaterial()->getEmittedColor().Length() <= 0.001 ){\n  154  \n  155          RayTree::AddShadowSegment(shadowRay,0,shadowHit.getT());\n\n17 matches across 6 files\n\n\nSearching 58 files for \"Iterate\"\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/glCanvas.cpp:\n  322    case ' ': \n  323      // a single step of radiosity\n  324:     radiosity->Iterate();\n  325      radiosity->setupVBOs();\n  326      glutPostRedisplay();\n  ...\n  489  void GLCanvas::idle() {\n  490    if (args->radiosity_animation) {\n  491:     double undistributed = radiosity->Iterate();\n  492      if (undistributed < 0.001) {\n  493        args->radiosity_animation = false;\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.cpp:\n  249  \n  250  // jump\n  251: double Radiosity::Iterate() {\n  252  \n  253    Vec3f white(1.0,1.0,1.0);\n\n/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.h:\n   63    // =========\n   64    // MODIFIERS\n   65:   double Iterate();\n   66    void setFormFactor(int i, int j, double value) { \n   67      assert (i >= 0 && i < num_faces);\n\n4 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 8532,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "raytracer.cpp",
			"settings":
			{
				"buffer_size": 6385,
				"line_ending": "Unix"
			}
		},
		{
			"file": "argparser.h",
			"settings":
			{
				"buffer_size": 5429,
				"line_ending": "Unix"
			}
		},
		{
			"file": "face.h",
			"settings":
			{
				"buffer_size": 2346,
				"line_ending": "Unix"
			}
		},
		{
			"file": "glCanvas.cpp",
			"settings":
			{
				"buffer_size": 16192,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/C++/C++.sublime-build",
	"command_palette":
	{
		"height": 389.0,
		"selected_items":
		[
			[
				":w",
				":w - Save"
			],
			[
				":",
				":w - Save"
			],
			[
				":q",
				"Set Syntax: SQL"
			],
			[
				":W",
				":w - Save"
			],
			[
				":save all",
				"File: Save All"
			],
			[
				":make",
				"Set Syntax: Makefile"
			],
			[
				":sav",
				"File: Save All"
			],
			[
				":saveall",
				"File: Save All"
			],
			[
				":saveal",
				"File: Save All"
			],
			[
				":save",
				"File: Save All"
			],
			[
				":s",
				"File: Save All"
			],
			[
				":install",
				"Package Control: Install Package"
			],
			[
				":e",
				":e - Revert"
			],
			[
				":package",
				"Package Control: Install Package"
			],
			[
				":inst",
				"Package Control: Install Package"
			],
			[
				":pack",
				"Preferences: Browse Packages"
			]
		],
		"width": 457.0
	},
	"console":
	{
		"height": 147.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/espinm2/Code/graphics_lab_repo/theses/nasmaj/Thesis.bib",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/edge.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/README.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/green_mosaic.ppm",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/mesh.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/material.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/raytracer.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/face.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/face.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/MersenneTwister.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/material.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/hit.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/sphere.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/raytree.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/raytree.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/raytracer.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/glCanvas.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/ray.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/vectors.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/main.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/hash.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/image.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/matrix.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/hw02.todo",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/camera.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/camera.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/argparser.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/radiosity.cpp",
		"/home/espinm2/Code/temp/hw6/soln/board_solution.cpp",
		"/home/espinm2/Code/temp/hw6/soln/board_solution.h",
		"/home/espinm2/Code/temp/hw6/soln/main_solution.cpp",
		"/home/espinm2/Code/temp/hw6/soln/move.h",
		"/home/espinm2/Code/temp/hw6/soln/README.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/sphere.h",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/vectors.h",
		"/home/espinm2/Code/adv_gfx_repo/hw03/src/utils.h",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/fluid_compressible.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/argparser.h",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/hw2_gradesheet.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/fluid.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/self_grade_sheet.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/fluid_spiral_xy.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/fluid_random_xy.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/provot_correct_structural.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/cloth_render.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/denim_curtain.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/silk_curtain.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/table_cloth.txt",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/cloth.h",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/cloth.cpp",
		"/home/espinm2/Code/temp/yulou/table.h",
		"/home/espinm2/Code/temp/yulou/main.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/fluid.h",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/fluid_render.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/cell.h",
		"/home/espinm2/.config/sublime-text-3/Packages/:",
		"/home/espinm2/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/glCanvas.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/main.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw02/src/matrix.h",
		"/home/espinm2/Code/GRADING/temp/Paper",
		"/home/espinm2/Code/GRADING/temp/temp.cpp",
		"/home/espinm2/Code/GRADING/temp/comments_hw1",
		"/home/espinm2/Code/GRADING/temp/vector-usage-example.cpp",
		"/home/espinm2/Code/temp/temp.cpp",
		"/home/espinm2/Code/temp/comments_hw1",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/vectors.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/triangle.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/vertex.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/mesh.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/matrix.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw01/edge.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/hash.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/.main.cpp.swp",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/mesh.h",
		"/home/espinm2/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/espinm2/Code/adv_gfx_repo/hw01/mesh.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/argparser.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/src/main.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw01/vectors.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/vertex.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/mesh.cpp",
		"/home/espinm2/Code/adv_gfx_repo/hw01/hash.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/triangle.h",
		"/home/espinm2/Code/adv_gfx_repo/hw01/matrix.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 124.0,
		"where_history":
		[
			".",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"josh",
			"cout",
			"printf",
			"cout",
			"Iterate",
			"emitt",
			"Iterate",
			"radiosity",
			"CastRay",
			"FLT_MAX",
			"cout",
			"printf",
			"point",
			"stratified",
			"radio",
			"getabsorbed",
			"EPSILON",
			"setupHelperForColor",
			"raytree",
			"setupHelperForColor",
			"num_form_factor_samples",
			"setupHelperForColor",
			"max_undistributed_patch",
			"formfactors",
			"getformfactor",
			"max_undistributed",
			"max_undis",
			"max_undi",
			"setRadiance",
			"undistributed",
			"radiance",
			"  ",
			"findMaxUndistributed",
			"setUndistributed",
			"PI",
			"compute",
			"ComputeFormFactors",
			"PI",
			"GLOBAL_mtrand",
			"random",
			"my_max",
			"r",
			"max_d",
			"TraceRay",
			"CastRay",
			"TraceTraceRayRay",
			"void",
			"cout",
			"Shade",
			"AddMainSegment",
			"args",
			"CastRay",
			"Primitive",
			"srgb_to_linear",
			"LIST",
			"MoveParticles",
			"cout",
			"printf",
			"cout",
			"restStructLength",
			"fabs",
			"%f",
			" {",
			"move",
			"abs",
			"jump",
			"abs",
			"surface",
			"force",
			"MoveParticles",
			"print",
			"cout",
			"SetEmptySurfaceFull",
			"surface",
			"setPressure",
			"SetBoundaryVelocities",
			"setPressure",
			"master",
			"getInterpolatedVelocity",
			"MoveParticles",
			"main",
			"cout",
			"printf",
			"adjust_new_u_plus",
			"a",
			"BETA_0",
			"EPSILON",
			"AdjustForIncompressibility",
			"UpdatePressures",
			"AdjustForIncompressibility",
			"SetBoundaryVelocities",
			"ComputeNewVelocities",
			"GenerateParticles",
			"UpdatePressures",
			"SetBoundaryVelocities",
			"CopyVelocities",
			"ComputeNewVelocities",
			"AdjustForIncompressibility",
			"MoveParticles",
			"ComputeNewVelocities",
			"AdjustForIncompressibility",
			"num_adj_cells",
			"AdjustForIncompressibility",
			"status",
			"getCell",
			"boundry",
			"AdjustForIncompressibility",
			"xy_free_slip",
			"free",
			"AdjustForIncompressibility",
			"UpdatePressures",
			"MoveParticles",
			"getInterpolatedVelocity",
			"getAreaSquares",
			"cloth_unhappy_edge_indices",
			"cout",
			"= ",
			"cout",
			"restStructLength",
			"void",
			"other",
			"todo",
			"moveParticles",
			"getParticles",
			"getInterpolatedVelocity",
			"todo",
			"assignment",
			"ass"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"%.2f",
			"fabs",
			"otherP",
			"flexPartVec",
			"adjPartVec"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "radiosity.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19467,
						"regions":
						{
						},
						"selection":
						[
							[
								5573,
								5573
							]
						],
						"settings":
						{
							"rulers":
							[
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 3402.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/espinm2/Code/graphics_lab_repo/theses/nasmaj/Thesis.bib",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38967,
						"regions":
						{
						},
						"selection":
						[
							[
								22566,
								22566
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/Bibtex.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 11300.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "vectors.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8490,
						"regions":
						{
						},
						"selection":
						[
							[
								741,
								741
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "reflective_spheres.obj",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 613,
						"regions":
						{
						},
						"selection":
						[
							[
								409,
								409
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "textured_water_molecule.obj",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 693,
						"regions":
						{
						},
						"selection":
						[
							[
								475,
								475
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "hw3_gradesheet.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3637,
						"regions":
						{
						},
						"selection":
						[
							[
								1675,
								1675
							]
						],
						"settings":
						{
							"spell_check": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "README.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4134,
						"regions":
						{
						},
						"selection":
						[
							[
								441,
								441
							]
						],
						"settings":
						{
							"spell_check": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "radiosity.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4297,
						"regions":
						{
						},
						"selection":
						[
							[
								3584,
								3584
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1872.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "ray.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1065,
						"regions":
						{
						},
						"selection":
						[
							[
								502,
								502
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "hit.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1545,
						"regions":
						{
						},
						"selection":
						[
							[
								408,
								408
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8532,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										152,
										159
									],
									[
										397,
										404
									],
									[
										668,
										675
									],
									[
										869,
										876
									],
									[
										1114,
										1121
									],
									[
										1430,
										1437
									],
									[
										1655,
										1662
									],
									[
										1873,
										1880
									],
									[
										2216,
										2223
									],
									[
										2524,
										2531
									],
									[
										2726,
										2733
									],
									[
										2930,
										2937
									],
									[
										3120,
										3127
									],
									[
										3435,
										3442
									],
									[
										3637,
										3644
									],
									[
										3841,
										3848
									],
									[
										4031,
										4038
									],
									[
										4319,
										4324
									],
									[
										4389,
										4394
									],
									[
										4559,
										4564
									],
									[
										4857,
										4862
									],
									[
										4887,
										4892
									],
									[
										5116,
										5121
									],
									[
										5307,
										5312
									],
									[
										5525,
										5530
									],
									[
										5710,
										5715
									],
									[
										5771,
										5776
									],
									[
										5873,
										5878
									],
									[
										6247,
										6252
									],
									[
										6539,
										6544
									],
									[
										6760,
										6765
									],
									[
										7064,
										7069
									],
									[
										7245,
										7250
									],
									[
										7498,
										7503
									],
									[
										7815,
										7822
									],
									[
										8017,
										8024
									],
									[
										8221,
										8228
									],
									[
										8391,
										8398
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								8223,
								8223
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 7,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4158.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "raytracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6385,
						"regions":
						{
						},
						"selection":
						[
							[
								2833,
								2833
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 212.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "argparser.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5429,
						"regions":
						{
						},
						"selection":
						[
							[
								2915,
								2915
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "face.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2346,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "glCanvas.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16192,
						"regions":
						{
						},
						"selection":
						[
							[
								14892,
								14892
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8420.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 124.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "hw3.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"radio",
				"radiosity.cpp"
			],
			[
				"face",
				"face.h"
			],
			[
				"args",
				"argparser.h"
			],
			[
				"arg",
				"argparser.h"
			],
			[
				"vec",
				"vectors.h"
			],
			[
				"gl",
				"glCanvas.cpp"
			],
			[
				"radi",
				"radiosity.h"
			],
			[
				"ray",
				"ray.h"
			],
			[
				"hit",
				"hit.h"
			],
			[
				"glc",
				"glCanvas.cpp"
			],
			[
				"sph",
				"sphere.cpp"
			],
			[
				"raid",
				"radiosity.cpp"
			],
			[
				"materi",
				"material.h"
			],
			[
				"mater",
				"material.cpp"
			],
			[
				"",
				"raytree.cpp"
			],
			[
				"raido",
				"radiosity.h"
			],
			[
				"rad",
				"radiosity.cpp"
			],
			[
				"mesh",
				"mesh.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 215.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
